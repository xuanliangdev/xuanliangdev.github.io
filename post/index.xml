<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on xuanliang</title>
    <link>https://xuanliangdev.github.io/post/</link>
    <description>Recent content in Posts on xuanliang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 15 Feb 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://xuanliangdev.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android 内存分析（围绕Bitmap）</title>
      <link>https://xuanliangdev.github.io/post/android%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%B4%E7%BB%95bitmap/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/android%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%B4%E7%BB%95bitmap/</guid>
      <description>疑问： 1、图片在内存中的大小跟imageview设置的宽高有没影响？ 2、同一张图片放在drawable里面，跟放在drawable-xxhd</description>
    </item>
    
    <item>
      <title>Android Architecture Blueprints学习</title>
      <link>https://xuanliangdev.github.io/post/android-architecture-blueprints/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/android-architecture-blueprints/</guid>
      <description>google Android Architecture Blueprints学习 参考资料： https://developer.android.google.cn/topic/libraries/architecture 1、todo-mvp 一个便签的demo， 类图： 核心： 1、View： 将对于view的操作封装成具体的</description>
    </item>
    
    <item>
      <title>RecyclerView学习整理</title>
      <link>https://xuanliangdev.github.io/post/recyclerview/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/recyclerview/</guid>
      <description>疑问 1、RecyclerView缓存复用机制原理？ 2、pre-layout和prefetch原理？ RecyclerView 核心类图 1、核心流程 核心流程源码： 1、三</description>
    </item>
    
    <item>
      <title>一次列表卡顿分析</title>
      <link>https://xuanliangdev.github.io/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</guid>
      <description>内存专项测试问题发现：小米闻声第一版时自测发现，当连续识别时间过长超过半小时，界面列表滑动出现明显卡顿，重启应用后卡顿不复现。 1、问题定位 卡</description>
    </item>
    
    <item>
      <title>Fragment机制原理溯源</title>
      <link>https://xuanliangdev.github.io/post/fragment%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/fragment%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description>1、概述Fragment机制 1、Android3.0引入，可以给大屏幕动态界面设计提供支持。 2、现在主要用在一个页面内嵌多个Tab时使用。 2</description>
    </item>
    
    <item>
      <title>无障碍学习整理（基于talkback）</title>
      <link>https://xuanliangdev.github.io/post/%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86%E4%B8%BB%E8%A6%81%E7%A0%94%E7%A9%B6talkback%E7%9A%84%E6%97%A0%E9%9A%9C%E7%A2%8D%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86%E4%B8%BB%E8%A6%81%E7%A0%94%E7%A9%B6talkback%E7%9A%84%E6%97%A0%E9%9A%9C%E7%A2%8D%E6%9C%8D%E5%8A%A1/</guid>
      <description>一、整理原因： 为了辅助理解无障碍google官方开发文档api的原理。 二、参考文档 无障碍开发google官方文档 三、无障碍服务框架结构分析 3</description>
    </item>
    
    <item>
      <title>preference体系学习总结</title>
      <link>https://xuanliangdev.github.io/post/preference%E4%BD%93%E7%B3%BB%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/preference%E4%BD%93%E7%B3%BB%E5%AD%A6%E4%B9%A0/</guid>
      <description>1.preference体系学习总结 类图 第一部分主要学习了preference体系的相关知识（类图中蓝色和绿色部分） 1.1 数据结构描述 1.1.1 pref</description>
    </item>
    
    <item>
      <title>从Android项目学习设计模式</title>
      <link>https://xuanliangdev.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>从Android项目学习设计模式 这个月看了一遍《Android源码设计模式解析与实战》，又一次被android中framework层的设计震</description>
    </item>
    
    <item>
      <title>ActivityManagerService流程总结</title>
      <link>https://xuanliangdev.github.io/post/activitymanagerservice%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/activitymanagerservice%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
      <description>ActivityManagerService流程总结 ActivityManagerService是一个Binder服务，用来负责系统中四大组</description>
    </item>
    
    <item>
      <title>Android内存性能分析</title>
      <link>https://xuanliangdev.github.io/post/android%E5%86%85%E5%AD%98%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/android%E5%86%85%E5%AD%98%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>Android内存性能分析 工具：Android Studio、MAT(Memory Analyzer Tool) 第三方库：LeakCanary 1、Android Prof</description>
    </item>
    
    <item>
      <title>APK的安装过程分析</title>
      <link>https://xuanliangdev.github.io/post/apk%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/apk%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>APK的安装过程分析（PackageManagerService启动过程） 时序图 步骤说明 1.pkms的main函数入口 2.加入android</description>
    </item>
    
    <item>
      <title>mac编译源码</title>
      <link>https://xuanliangdev.github.io/post/mac%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/mac%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81/</guid>
      <description>Mac 编译 android framework 6.0源码 工作到现在为止刚好一年半，一直做着公司Android产品的半开发半维护的工作，内心一直向往一份关于android fram</description>
    </item>
    
    <item>
      <title>Binder机制学习</title>
      <link>https://xuanliangdev.github.io/post/binder%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/binder%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</guid>
      <description>Binder机制学习 Binder是用在Android系统中的一个进程间通信(IPC)机制，使用C/S架构，服务端和客户端通过Binder进行</description>
    </item>
    
    <item>
      <title>Android 消息处理机制学习</title>
      <link>https://xuanliangdev.github.io/post/android-%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xuanliangdev.github.io/post/android-%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</guid>
      <description>Android 消息处理机制学习 之前也看过不少的书或博客介绍Android 消息处理机制的知识点，但总是刚看完感觉懂了，过几天就忘，今天一边看源码，一边画了</description>
    </item>
    
  </channel>
</rss>